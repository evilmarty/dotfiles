#!/bin/bash

set -eu

main() {
  local branch=$(git config --default master --get init.defaultbranch)
  local last_revision=$(git rev-parse HEAD)

  while is_dirty; do
    git add --patch
    if [ $? -ne 0 ]; then
      local last_exit_status=$?
      break
    fi
    commit=$(select_commit "${last_revision}...${branch}")
    if [ $? -ne 0 ]; then
      return $?
    fi
    git commit --fixup $commit "$@" || break
  done

  local current_revision=$(git rev-parse HEAD)
  if [ "$last_revision" == "$current_revision" ]; then
    return $last_exit_status
  fi

  confirm_squash "$branch" && confirm_force_push || confirm_push || true
}

confirm_squash() {
  confirm "Squash branch?" && git rebase --autosquash -i "$1"
}

confirm_push() {
  confirm "Push branch?" && git push
}

confirm_force_push() {
  confirm "Force push branch?" && git push --force
}

select_commit() {
  git log --color=always --oneline "$@" | \
    fzf --ansi --no-sort --header='Select commit to fix up'  --preview 'git log -p -1 --color=always --pretty=full {1}' | \
    awk '{ print $1 }'
}

is_dirty() {
  if [ -n "$(git diff-index --name-only HEAD)" ]; then
    return 0
  else
    return 1
  fi
}

confirm() {
  read -p "$@ " choice
  case "$choice" in
    y|Y|yes|t|T|true|1 )
      return 0;;
    * )
      return 1;;
  esac
}

main "$@"
